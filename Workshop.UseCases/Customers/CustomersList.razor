@using Fluxor
@using Workshop.Shared.Ui.Components.Conditions
@using Workshop.Shared.Ui.Flux
@using Workshop.UseCases.Stores.Customers
@using static Workshop.UseCases.Stores.Customers.CustomerActions

@inherits FluxComponent<CustomerState>

<Condition Check="State.Value.IsLoading">
  <If>
    <i class="bx bx-loader-circle bx-spin"></i> Loading ...
  </If>
  <Else>
    <table class="table">
      <thead>
        <tr>
          <th>Id</th>
          <th>Name</th>
          <th>Action</th>
        </tr>
      </thead>
      <tbody>
        @foreach (var customer in Customers)
        {
          <tr @key="customer.Id">
            <td>@customer.Id</td>
            <td>@customer.Name</td>
            <td>
              <button type="button" class="btn btn-primary" @onclick="@(() => Edit(customer.Id))">Edit</button>
            </td>
          </tr>
        }
      </tbody>
    </table>
  </Else>
</Condition>

@if (SelectedCustomerId != 0)
{
  <EditCustomer />
}

@code {

  private IEnumerable<CustomerListViewModel> Customers => State.Value.Customers;
  private int SelectedCustomerId => State.Value.CurrentEditId;

  protected override void OnInitialized()
  {
    base.OnInitialized();
    Dispatcher.Dispatch(LoadCustomers());
  }

  private void Edit(int customerId)
  {
    Dispatcher.Dispatch(EditCustomer(customerId));
  }

}
