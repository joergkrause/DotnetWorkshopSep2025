@using Microsoft.AspNetCore.Components.Forms
@using Workshop.Shared.Ui.Flux
@using Workshop.Shared.Ui.Forms
@using Workshop.UseCases.Stores.Customers
@using static Workshop.UseCases.Stores.Customers.CustomerActions

@inherits FluxComponent<CustomerState>

<h3>EditCustomer</h3>
@if (Customer is not null)
{
  <AutoForm TModel="CustomerEditViewModel" Model="Customer" OnSubmit="Save">
    <Buttons>
      <button type="submit" class="btn btn-primary">Save</button>
    </Buttons>
  </AutoForm>

  <hr/>

  <EditForm Model="@Customer" OnValidSubmit="@Save">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputElement ModelType="CustomerEditViewModel" @bind-Value="Customer.Name" For="@(() => Customer.Name)" Name="@nameof(CustomerEditViewModel.Name)" />

    <InputElement ModelType="CustomerEditViewModel" @bind-Value="Customer.Email" For="@(() => Customer.Email)" Name="@nameof(CustomerEditViewModel.Email)" />

    <InputElement ModelType="CustomerEditViewModel" @bind-Value="Customer.Phone" For="@(() => Customer.Phone)" Name="@nameof(CustomerEditViewModel.Phone)" />

    <button type="submit" class="btn btn-success">Save</button>
  </EditForm>

}
else
{
  <p>Loading...</p>
}


@code {

  private CustomerEditViewModel? Customer => State.Value.CurrentEdit;

  private void Save(EditContext context)
  {
    var updatedCustomer = context.Model as CustomerEditViewModel;
    if (updatedCustomer is null) return;
    Dispatcher.Dispatch(UpdateCustomer(updatedCustomer));
  }

}
