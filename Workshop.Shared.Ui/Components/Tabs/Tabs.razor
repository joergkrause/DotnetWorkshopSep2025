<CascadingValue Value="this">
  @ChildContent
</CascadingValue>

<div class="tabs-container">
  <ul class="nav nav-tabs">
    @foreach (var tab in _tabItems)
    {
      var name = tab.Key;
      <li class="nav-item" role="presentation">
        <button class="nav-link @(name == ActiveTab ? "active" : "")"
                id="tab-@name"
                role="tab"
                aria-controls="panel-@name"
                aria-selected="@(name == ActiveTab ? "true" : "false")"
                @onclick="() => SetActiveTab(name)">
          @(_tabItems[name])
        </button>
      </li>
    }
  </ul>
  <div class="tab-content mt-3">
    @foreach (var panel in _tabPanels)
    {
      var name = panel.Key;
      <div class="tab-pane @(name == ActiveTab ? "active show" : "d-none")"
           id="panel-@name"
           role="tabpanel"
           aria-labelledby="tab-@name">
        @(_tabPanels[name])
      </div>
    }
  </div>
</div>

@code {

  [Parameter]
  public RenderFragment? ChildContent { get; set; }

  [Parameter]
  public string ActiveTab { get; set; } = default!;

  [Parameter]
  public EventCallback<string> ActiveTabChanged { get; set; }

  private readonly Dictionary<string, RenderFragment> _tabItems = new();
  private readonly Dictionary<string, RenderFragment> _tabPanels = new();
  private bool _hasRendered = false;

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender && !_hasRendered)
    {
      _hasRendered = true;
      StateHasChanged();
    }
  }

  public void AddTab(string name, RenderFragment tab)
  {
    _tabItems.Add(name, tab);
    if (_hasRendered)
    {
      StateHasChanged();
    }
  }

  public void AddPanel(string name, RenderFragment panel)
  {
    _tabPanels.Add(name, panel);
    if (_hasRendered)
    {
      StateHasChanged();
    }
  }

  public void ClearTabs()
  {
    _tabItems.Clear();
    _tabPanels.Clear();
  }

  private async void SetActiveTab(string name)
  {
    ActiveTab = name;
    if (ActiveTabChanged.HasDelegate)
    {
      await ActiveTabChanged.InvokeAsync(name);
    }
    StateHasChanged();
  }

}