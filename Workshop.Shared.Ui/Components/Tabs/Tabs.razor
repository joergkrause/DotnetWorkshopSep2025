<CascadingValue Value="this">
  @ChildContent
</CascadingValue>

<div class="tabs-container">
  <ul class="nav nav-tabs">
    @for (int i = 0; i < _tabItems.Count; i++)
    {
      var index = i;
      <li class="nav-item" role="presentation">
        <button class="nav-link @(i == ActiveTabIndex ? "active" : "")"
                id="tab-@i"
                role="tab"
                aria-controls="panel-@i"
                aria-selected="@(i == ActiveTabIndex ? "true" : "false")"
                @onclick="() => SetActiveTab(index)">
          @(_tabItems[i])
        </button>
      </li>
    }
  </ul>
  <div class="tab-content mt-3">
    @for (int i = 0; i < _tabPanels.Count; i++)
    {
      var index = i;
      <div class="tab-pane @(i == ActiveTabIndex ? "active show" : "")"
           id="panel-@i"
           role="tabpanel"
           aria-labelledby="tab-@i"
           style="@(i == ActiveTabIndex ? "" : "display: none;")">
        @(_tabPanels[i])
      </div>
    }
  </div>
</div>

@code {

  [Parameter]
  public int ActiveTabIndex { get; set; }

  [Parameter]
  public RenderFragment? ChildContent { get; set; }

  private readonly List<RenderFragment> _tabItems = new();
  private readonly List<RenderFragment> _tabPanels = new();
  private bool _hasRendered = false;

  protected override void OnAfterRender(bool firstRender)
  {
    if (firstRender && !_hasRendered)
    {
      _hasRendered = true;
      StateHasChanged();
    }
  }

  public void AddTab(RenderFragment tab)
  {
    _tabItems.Add(tab);
    if (_hasRendered)
    {
      StateHasChanged();
    }
  }

  public void AddPanel(RenderFragment panel)
  {
    _tabPanels.Add(panel);
    if (_hasRendered)
    {
      StateHasChanged();
    }
  }

  public void ClearTabs()
  {
    _tabItems.Clear();
    _tabPanels.Clear();
  }

  private void SetActiveTab(int index)
  {
    ActiveTabIndex = index;
    StateHasChanged();
  }

}