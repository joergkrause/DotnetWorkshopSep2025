@page "/Account/Register"
@using CustomerFrontendApp.Components.Layout
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Workshop.UseCases.ViewModels

@layout AuthenticationLayout

@inject UserManager<UserViewModel> UserManager
@inject SignInManager<UserViewModel> SignInManager
@inject NavigationManager Navigation

<PageTitle>Register</PageTitle>

<div class="row justify-content-center">
  <div class="col-md-4">
    <h2>Register</h2>
    <EditForm Model="RegisterModel" OnValidSubmit="HandleRegister" FormName="register">
      <DataAnnotationsValidator />
      <ValidationSummary class="text-danger" />

      <div class="form-floating mb-3">
        <InputText @bind-Value="RegisterModel.Email" class="form-control" placeholder="Email" />
        <label>Email</label>
        <ValidationMessage For="() => RegisterModel.Email" />
      </div>

      <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="RegisterModel.Password" class="form-control" placeholder="Password" />
        <label>Password</label>
        <ValidationMessage For="() => RegisterModel.Password" />
      </div>

      <div class="form-floating mb-3">
        <InputText type="password" @bind-Value="RegisterModel.ConfirmPassword" class="form-control" placeholder="Confirm Password" />
        <label>Confirm Password</label>
        <ValidationMessage For="() => RegisterModel.ConfirmPassword" />
      </div>

      <button type="submit" class="btn btn-primary w-100">Register</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
      <div class="alert alert-danger mt-3">@errorMessage</div>
    }

    <div class="mt-3">
      <p>Already have an account? <a href="/Account/Login">Login here</a></p>
    </div>
  </div>
</div>

@code {
  [SupplyParameterFromForm]
  public RegisterInputModel RegisterModel { get; set; } = new();

  private string? errorMessage;

  private async Task HandleRegister()
  {
    var user = new UserViewModel { UserName = RegisterModel.Email, Email = RegisterModel.Email };
    var result = await UserManager.CreateAsync(user, RegisterModel.Password);

    if (result.Succeeded)
    {
      await SignInManager.SignInAsync(user, isPersistent: false);
      Navigation.NavigateTo("/", forceLoad: true);
    }
    else
    {
      errorMessage = string.Join(", ", result.Errors.Select(e => e.Description));
    }
  }

  public class RegisterInputModel
  {
    [Required]
    [EmailAddress]
    public string Email { get; set; } = "";

    [Required]
    [StringLength(100, MinimumLength = 4)]
    [DataType(DataType.Password)]
    public string Password { get; set; } = "";

    [DataType(DataType.Password)]
    [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
    public string ConfirmPassword { get; set; } = "";
  }
}