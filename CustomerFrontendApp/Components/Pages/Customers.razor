@page "/Customers"
@page "/Customers/Target"
@page "/Customers/{Target:alpha}"

@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Workshop.Shared.Ui.Components.Conditions
@using Workshop.Shared.Ui.Components.Repeaters
@using Workshop.Shared.Ui.Components.Tabs

@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationState

<PageTitle>Customers</PageTitle>

<h3>@tabName</h3>
               
<ErrorBoundary>
  <ChildContent>
    <Condition Check="@(tabName == "list")"></Condition>
  </ChildContent>
  <ErrorContent>
    <div class="alert alert-danger" role="alert">
      An error occurred while loading the customers page.
      @context.Message
    </div>
  </ErrorContent>
</ErrorBoundary>

<Condition Check="@(tabName == "reports")">
  <If>
    <div class="alert alert-info" role="alert">
      We have new customer reports!
    </div>
  </If>
</Condition>

<ol>
  <Repeater Items="@TabsFromDatabase" ItemType="string" Context="item">
    <li>Navigiere zu <button type="button" class="btn btn-xs btn-success" @onclick="@(() => NavigateTo(item))">@item</button> </li>
  </Repeater>
</ol>

<Tabs @bind-ActiveTab="tabName">
  <Items>
    <Repeater Items="TabsFromDatabase">
      <Item Name="@context">Customers @context.ToUpper()</Item>
    </Repeater>
  </Items>
  <Panels>
    <Panel Name="list">
      <h4>Customers List</h4>
      <CustomersList></CustomersList>
    </Panel>
    <Panel Name="add">
      <h4>Add New Customer</h4>
      <p>Create a new customer profile.</p>
    </Panel>
    <Panel Name="reports">
      <h4>Customer Reports</h4>
      <p>Generate and view customer reports.</p>
    </Panel>
  </Panels>
</Tabs>


@code {

  private string? user;
  private string? tabName;
  private List<string> TabsFromDatabase => new() { "list", "reports" };

  [Parameter]
  public string? Target { get; set; }

  [SupplyParameterFromQuery(Name = "name")]
  public string? QueryTarget { get; set; }

  protected override async Task OnInitializedAsync()
  {
    await base.OnInitializedAsync();

    var state = await AuthenticationState.GetAuthenticationStateAsync();
    user = state.User.Identity?.Name;
  }

  protected override void OnInitialized()
  {
    base.OnInitialized();    

    if (Target is not null && TabsFromDatabase.Contains(Target))
    {
      OnActiveTab(Target);
    }
    else if (QueryTarget is not null && TabsFromDatabase.Contains(QueryTarget))
    {
      OnActiveTab(QueryTarget);
    }
  }

  private void NavigateTo(string target)
  {
    NavManager.NavigateTo($"/Customers/{target}");
    OnActiveTab(target);
  }

  private void OnActiveTab(string name)
  {
    tabName = name;
  }

}
